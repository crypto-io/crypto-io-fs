{"version":3,"file":"fs.js","sources":["src/index.js"],"sourcesContent":["import { writeFile, readdir, readdirSync, mkdirSync, rmdirSync, readFile, unlinkSync, existsSync } from 'fs';\r\nimport { dirname, join } from 'path';\r\n\r\nexport const direxists = (dir = '') => {\r\n  try {\r\n    readdirSync(dir);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport const exists = path => existsSync(path);\r\n\r\nexport const mkdir = path => {\r\n  const dir = dirname(path);\r\n  if (!direxists(dir)) {\r\n    mkdir(dir)\r\n    mkdirSync(dir)\r\n  }\r\n}\r\n\r\nexport const write = (path, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    writeFile(path, data, (error, d) => {\r\n      if (error) {\r\n        if (error.code === 'ENOENT') {\r\n          mkdir(path);\r\n          return write(path, data).then(() => resolve());\r\n        }\r\n        reject(error);\r\n      }\r\n      resolve();\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Get the directory paths\r\n * @return Promise()\r\n * Resolves {filename, path}\r\n */\r\nexport const readdirectory = path => new Promise((resolve, reject) => {\r\n  readdir(path, (error, data) => {\r\n    if (error) reject(error);\r\n    else resolve(data.map(file => file = {filename: file, path: join(path, file)}));\r\n  });\r\n});\r\n\r\nexport const read = (path, as='string') => new Promise((resolve, reject) =>\r\n  readFile(path, (error, data) => {\r\n    if (error) {\r\n      // TODO: decide to include or not, check use case.\r\n      // if(error.code === 'EISDIR') return readdirectory(path);\r\n      reject(error);\r\n    } else try {\r\n      if(as === 'string' || as === 'map') data = data.toString();\r\n      else if (as === 'json') data = JSON.parse(data);\r\n      else if (as === 'map') data = new Map(data);\r\n\r\n      resolve(data);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  }));\r\n\r\nexport const remove = path => new Promise((resolve, reject) => {\r\n  try {\r\n    unlinkSync(path);\r\n    resolve();\r\n  } catch (error) {\r\n    if (error.code === 'EPERM' || error.code === 'EISDIR') {\r\n      try {\r\n        rmdirSync(path);\r\n        resolve();\r\n      } catch (error) {\r\n        if (error.code === 'ENOTEMPTY') {\r\n          const files = readdirSync(path);\r\n          for (let file of files) {\r\n            file = join(path, file);\r\n            unlinkSync(file)\r\n          }\r\n          return remove(path).then(() => {resolve()})\r\n        } else {\r\n          reject(error);\r\n        }\r\n      }\r\n    } else {\r\n      reject(error);\r\n    }\r\n  }\r\n});\r\n\r\nexport default {\r\n  read,\r\n  readdirectory,\r\n  write,\r\n  remove,\r\n  direxists,\r\n  exists,\r\n  mkdir\r\n};\r\n"],"names":["direxists","dir","e","exists","path","existsSync","mkdir","dirname","write","data","Promise","resolve","reject","error","d","code","then","readdirectory","map","file","filename","join","read","as","readFile","toString","JSON","parse","Map","remove","files","readdirSync"],"mappings":";;;;;;;AAGO,MAAMA,YAAY,CAACC,MAAM,EAAP,KAAc;MACjC;mBACUA,GAAZ;GADF,CAEE,OAAOC,CAAP,EAAU;WACH,KAAP;;SAEK,IAAP;CANK;AASP,AAAO,MAAMC,SAASC,WAAQC,cAAWD,OAAX,CAAvB;AAEP,AAAO,MAAME,QAAQF,WAAQ;QACrBH,MAAMM,aAAQH,OAAR,CAAZ;MACI,CAACJ,UAAUC,GAAV,CAAL,EAAqB;UACbA,GAAN;iBACUA,GAAV;;CAJG;AAQP,AAAO,MAAMO,QAAQ,CAACJ,OAAD,EAAOK,IAAP,KAAgB;SAC5B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;iBAC5BR,OAAV,EAAgBK,IAAhB,EAAsB,CAACI,KAAD,EAAQC,CAAR,KAAc;UAC9BD,KAAJ,EAAW;YACLA,MAAME,IAAN,KAAe,QAAnB,EAA6B;gBACrBX,OAAN;iBACOI,MAAMJ,OAAN,EAAYK,IAAZ,EAAkBO,IAAlB,CAAuB,MAAML,SAA7B,CAAP;;eAEKE,KAAP;;;KANJ;GADK,CAAP;CADK;AAoBP,AAAO,MAAMI,gBAAgBb,WAAQ,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;aAC5DR,OAAR,EAAc,CAACS,KAAD,EAAQJ,IAAR,KAAiB;QACzBI,KAAJ,EAAWD,OAAOC,KAAP,EAAX,KACKF,QAAQF,KAAKS,GAAL,CAASC,QAAQA,OAAO,EAACC,UAAUD,IAAX,EAAiBf,MAAMiB,UAAKjB,OAAL,EAAWe,IAAX,CAAvB,EAAxB,CAAR;GAFP;CADmC,CAA9B;AAOP,AAAO,MAAMG,OAAO,CAAClB,OAAD,EAAOmB,KAAG,QAAV,KAAuB,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACrDY,YAASpB,OAAT,EAAe,CAACS,KAAD,EAAQJ,IAAR,KAAiB;MAC1BI,KAAJ,EAAW;WAGFA,KAAP;GAHF,MAIO,IAAI;QACNU,OAAO,QAAP,IAAmBA,OAAO,KAA7B,EAAoCd,OAAOA,KAAKgB,QAAL,EAAP,CAApC,KACK,IAAIF,OAAO,MAAX,EAAmBd,OAAOiB,KAAKC,KAAL,CAAWlB,IAAX,CAAP,CAAnB,KACA,IAAIc,OAAO,KAAX,EAAkBd,OAAO,IAAImB,GAAJ,CAAQnB,IAAR,CAAP;YAEfA,IAAR;GALK,CAML,OAAOI,KAAP,EAAc;WACPA,KAAP;;CAZJ,CADyC,CAApC;AAiBP,AAAO,MAAMgB,SAASzB,WAAQ,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACzD;kBACSR,OAAX;;GADF,CAGE,OAAOS,KAAP,EAAc;QACVA,MAAME,IAAN,KAAe,OAAf,IAA0BF,MAAME,IAAN,KAAe,QAA7C,EAAuD;UACjD;qBACQX,OAAV;;OADF,CAGE,OAAOS,KAAP,EAAc;YACVA,MAAME,IAAN,KAAe,WAAnB,EAAgC;gBACxBe,QAAQC,eAAY3B,OAAZ,CAAd;eACK,IAAIe,IAAT,IAAiBW,KAAjB,EAAwB;mBACfT,UAAKjB,OAAL,EAAWe,IAAX,CAAP;0BACWA,IAAX;;iBAEKU,OAAOzB,OAAP,EAAaY,IAAb,CAAkB,MAAM;;WAAxB,CAAP;SANF,MAOO;iBACEH,KAAP;;;KAbN,MAgBO;aACEA,KAAP;;;CAtBwB,CAAvB;AA2BP,YAAe;MAAA;eAAA;OAAA;QAAA;WAAA;QAAA;;CAAf;;;;;;;;;"}